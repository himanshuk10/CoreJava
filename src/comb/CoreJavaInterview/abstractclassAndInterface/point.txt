Hereâ€™s a summary of the concepts related to abstract classes in Java:

### Summary of Abstract Class Concepts in Java:

1. **Can abstract class have constructors in Java?**
   - Yes, an abstract class can have constructors. These constructors are used to initialize common
     fields or perform setup tasks when a concrete subclass is instantiated.

2. **Can abstract class have private constructors in Java?**
   - Yes, an abstract class can have private constructors. This restricts direct instantiation,
     making it necessary to use a static method or subclass to create objects.

3. **Can abstract class implement interfaces in Java? Do they require to implement all methods?**
   - Yes, an abstract class can implement an interface. It is not required to implement all methods;
     it can provide implementations for some methods and leave others for subclasses to implement.

4. **Can abstract class be final in Java?**
   - No, an abstract class cannot be marked as `final`. This is because a final class cannot be subclassed,
     which contradicts the purpose of an abstract class.

5. **Can abstract class have static methods in Java?**
   - Yes, an abstract class can have static methods. These methods belong to the class itself and can be called
     without creating an instance of the class.

6. **Can you create an instance of an abstract class?**
   - No, you cannot create an instance of an abstract class directly. You must instantiate a concrete subclass
     that implements any abstract methods.

7. **Is it necessary for an abstract class to have abstract methods?**
   - No, it is not necessary. An abstract class can contain only concrete methods and still be declared abstract.

8. **What are abstract methods in Java?**
   - Abstract methods are declared without an implementation in an abstract class.
     They serve as placeholders that must be implemented by concrete subclasses.

9. **Can an abstract class contain a main method in Java?**
   - Yes, an abstract class can contain a `main` method. This allows the class to execute code,
     even though it cannot be instantiated directly.

### Conclusion:
Abstract classes in Java provide a way to define common behavior for related classes while allowing
flexibility through inheritance and method implementation. They play a crucial role in object-oriented
design by enabling code reuse and promoting a structured approach to programming.

//Abstract class vs interface
// Abstract class can have filed and constructor but interface does not have

-> why we can't create object of Abstract class
--> because Class in not full defined it have some Abstract method which in without implementation
--> You can't create an object of an abstract class because it's incomplete by design.
    Think of an abstract class as a blueprint with missing pieces. It can contain method definitions that have no body (i.e., abstract methods), meaning the class doesn't fully define how it behaves.
    If Java allowed you to instantiate an abstract class directly, it'd be like trying to build a house from a blueprint that doesn't specify how to build the roof-you'd end up with something unfinished, which the language wants to prevent.
    Instead, you create a subclass that completes the abstract class by implementing all its abstract methods.
    Then, and only then, can you create an instance-of the subclass.